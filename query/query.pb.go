// Code generated by protoc-gen-go.
// source: github.com/yarbelk/todo/query/query.proto
// DO NOT EDIT!

/*
Package query is a generated protocol buffer package.

It is generated from these files:
	github.com/yarbelk/todo/query/query.proto

It has these top-level messages:
	TaskQuery
	AllTasksParams
*/
package query

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"
import todo "github.com/yarbelk/todo"

import (
	client "github.com/micro/go-micro/client"
	server "github.com/micro/go-micro/server"
	context "golang.org/x/net/context"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type TaskQuery struct {
	Id string `protobuf:"bytes,1,opt,name=id" json:"id,omitempty"`
}

func (m *TaskQuery) Reset()                    { *m = TaskQuery{} }
func (m *TaskQuery) String() string            { return proto.CompactTextString(m) }
func (*TaskQuery) ProtoMessage()               {}
func (*TaskQuery) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type AllTasksParams struct {
}

func (m *AllTasksParams) Reset()                    { *m = AllTasksParams{} }
func (m *AllTasksParams) String() string            { return proto.CompactTextString(m) }
func (*AllTasksParams) ProtoMessage()               {}
func (*AllTasksParams) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func init() {
	proto.RegisterType((*TaskQuery)(nil), "TaskQuery")
	proto.RegisterType((*AllTasksParams)(nil), "AllTasksParams")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ client.Option
var _ server.Option

// Client API for Queryer service

type QueryerClient interface {
	GetTask(ctx context.Context, in *TaskQuery, opts ...client.CallOption) (*todo.TaskDefinition, error)
	AllTasks(ctx context.Context, in *AllTasksParams, opts ...client.CallOption) (*todo.TaskList, error)
}

type queryerClient struct {
	c           client.Client
	serviceName string
}

func NewQueryerClient(serviceName string, c client.Client) QueryerClient {
	if c == nil {
		c = client.NewClient()
	}
	if len(serviceName) == 0 {
		serviceName = "queryer"
	}
	return &queryerClient{
		c:           c,
		serviceName: serviceName,
	}
}

func (c *queryerClient) GetTask(ctx context.Context, in *TaskQuery, opts ...client.CallOption) (*todo.TaskDefinition, error) {
	req := c.c.NewRequest(c.serviceName, "Queryer.GetTask", in)
	out := new(todo.TaskDefinition)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *queryerClient) AllTasks(ctx context.Context, in *AllTasksParams, opts ...client.CallOption) (*todo.TaskList, error) {
	req := c.c.NewRequest(c.serviceName, "Queryer.AllTasks", in)
	out := new(todo.TaskList)
	err := c.c.Call(ctx, req, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Queryer service

type QueryerHandler interface {
	GetTask(context.Context, *TaskQuery, *todo.TaskDefinition) error
	AllTasks(context.Context, *AllTasksParams, *todo.TaskList) error
}

func RegisterQueryerHandler(s server.Server, hdlr QueryerHandler, opts ...server.HandlerOption) {
	s.Handle(s.NewHandler(&Queryer{hdlr}, opts...))
}

type Queryer struct {
	QueryerHandler
}

func (h *Queryer) GetTask(ctx context.Context, in *TaskQuery, out *todo.TaskDefinition) error {
	return h.QueryerHandler.GetTask(ctx, in, out)
}

func (h *Queryer) AllTasks(ctx context.Context, in *AllTasksParams, out *todo.TaskList) error {
	return h.QueryerHandler.AllTasks(ctx, in, out)
}

func init() { proto.RegisterFile("github.com/yarbelk/todo/query/query.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 183 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0xe2, 0xd2, 0x4c, 0xcf, 0x2c, 0xc9,
	0x28, 0x4d, 0xd2, 0x4b, 0xce, 0xcf, 0xd5, 0xaf, 0x4c, 0x2c, 0x4a, 0x4a, 0xcd, 0xc9, 0xd6, 0x2f,
	0xc9, 0x4f, 0xc9, 0xd7, 0x2f, 0x2c, 0x4d, 0x2d, 0xaa, 0x84, 0x90, 0x7a, 0x05, 0x45, 0xf9, 0x25,
	0xf9, 0x52, 0x4a, 0xb8, 0x94, 0x96, 0x24, 0x16, 0x67, 0x43, 0xd4, 0x28, 0x49, 0x73, 0x71, 0x86,
	0x24, 0x16, 0x67, 0x07, 0x82, 0xb4, 0x09, 0xf1, 0x71, 0x31, 0x65, 0xa6, 0x48, 0x30, 0x2a, 0x30,
	0x6a, 0x70, 0x06, 0x31, 0x65, 0xa6, 0x28, 0x09, 0x70, 0xf1, 0x39, 0xe6, 0xe4, 0x80, 0xe4, 0x8b,
	0x03, 0x12, 0x8b, 0x12, 0x73, 0x8b, 0x8d, 0xd2, 0xb9, 0xd8, 0xc1, 0x4a, 0x53, 0x8b, 0x84, 0x74,
	0xb9, 0xd8, 0xdd, 0x53, 0x4b, 0x40, 0x92, 0x42, 0x5c, 0x7a, 0x70, 0x33, 0xa4, 0x44, 0xf4, 0x40,
	0x56, 0x80, 0x05, 0x5c, 0x52, 0xd3, 0x32, 0xf3, 0x32, 0x4b, 0x32, 0xf3, 0xf3, 0x94, 0x18, 0x84,
	0x74, 0xb9, 0x38, 0x60, 0x66, 0x09, 0xf1, 0xeb, 0xa1, 0x1a, 0x2b, 0xc5, 0x87, 0xd0, 0xe4, 0x93,
	0x59, 0x5c, 0xa2, 0xc4, 0x90, 0xc4, 0x06, 0x76, 0x9e, 0x31, 0x20, 0x00, 0x00, 0xff, 0xff, 0xc8,
	0x81, 0xe2, 0x5a, 0xef, 0x00, 0x00, 0x00,
}
